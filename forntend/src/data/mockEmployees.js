// src/data/mockEmployees.js
let employees = [
  {
    id: "emp001",
    firstName: "John",
    lastName: "Doe",
    employeeId: "JD001",
    email: "john.doe@example.com",
    phone: "555-1234",
    department: "Engineering",
    position: "Senior Software Engineer",
    hireDate: "2020-05-15",
    status: "Active", // Active, On Leave, Terminated
    salary: 90000,
    address: "123 Tech Lane, Silicon Valley, CA",
  },
  {
    id: "emp002",
    firstName: "Alice",
    lastName: "Smith",
    employeeId: "AS002",
    email: "alice.smith@example.com",
    phone: "555-5678",
    department: "Marketing",
    position: "Marketing Manager",
    hireDate: "2019-08-20",
    status: "Active",
    salary: 85000,
    address: "456 Market St, San Francisco, CA",
  },
  {
    id: "emp003",
    firstName: "Robert",
    lastName: "Johnson",
    employeeId: "RJ003",
    email: "robert.johnson@example.com",
    phone: "555-8765",
    department: "Sales",
    position: "Sales Representative",
    hireDate: "2021-01-10",
    status: "On Leave",
    salary: 70000,
    address: "789 Commerce Rd, New York, NY",
  },
  {
    id: "emp004",
    firstName: "Emily",
    lastName: "Brown",
    employeeId: "EB004",
    email: "emily.brown@example.com",
    phone: "555-4321",
    department: "Human Resources",
    position: "HR Specialist",
    hireDate: "2022-03-01",
    status: "Active",
    salary: 65000,
    address: "101 People Ave, Chicago, IL",
  },
  {
    id: "emp005",
    firstName: "Michael",
    lastName: "Davis",
    employeeId: "MD005",
    email: "michael.davis@example.com",
    phone: "555-1122",
    department: "Engineering",
    position: "Junior Developer",
    hireDate: "2023-07-15",
    status: "Active",
    salary: 60000,
    address: "222 Code St, Austin, TX",
  },
];

let nextEmpIdCounter = 6; // For generating new 'id' (not employeeId)

const simulateApiCall = (data, delay = 400) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      // Deep copy to simulate fresh data from an API
      resolve(JSON.parse(JSON.stringify(data)));
    }, delay);
  });
};

export const getEmployees = async () => {
  return simulateApiCall(employees);
};

export const getEmployeeById = async (id) => {
  const employee = employees.find((emp) => emp.id === id);
  return simulateApiCall(employee); // Will resolve with undefined if not found
};

export const addEmployee = async (employeeData) => {
  // In a real app, employeeId might be generated by backend or follow a specific format
  // For now, we'll assume it's provided or can be part of employeeData
  const newEmployee = {
    ...employeeData,
    id: `emp${String(nextEmpIdCounter++).padStart(3, "0")}`,
    hireDate: employeeData.hireDate || new Date().toISOString().split("T")[0], // Default hire date if not provided
  };
  employees.push(newEmployee);
  return simulateApiCall(newEmployee);
};

export const updateEmployee = async (id, updatedEmployeeData) => {
  const index = employees.findIndex((emp) => emp.id === id);
  if (index !== -1) {
    employees[index] = { ...employees[index], ...updatedEmployeeData, id }; // Ensure ID isn't overwritten if not in data
    return simulateApiCall(employees[index]);
  }
  return simulateApiCall(null); // Simulate not found
};

export const deleteEmployee = async (id) => {
  const index = employees.findIndex((emp) => emp.id === id);
  if (index !== -1) {
    employees.splice(index, 1);
    return simulateApiCall({ success: true });
  }
  return simulateApiCall({ success: false }); // Simulate not found
};
